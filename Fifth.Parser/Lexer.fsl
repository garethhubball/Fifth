{

module Lexer

// Opens methods related to fslex.exe
open FSharp.Text.Lexing

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

let digit = ['0' - '9']
// let hex_digit = (digit | ['A' - 'F'] | ['a' - 'f'])

rule tokenstream = parse
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
| "+" { Parser.ADD }
| "-" { Parser.SUBTRACT }
| "*" { Parser.MULTIPLY }
| "/" { Parser.DIVIDE }
| "." { Parser.OUTPUT }
| ['-']?digit+ { Parser.NUMBER (System.Int32.Parse(lexeme lexbuf)) }
| _    		{ failwith ("ParseError" + lexeme lexbuf) }
| eof   	{ Parser.EOF }